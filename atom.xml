<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NeeleX</title>
  
  <subtitle>Sunanda Bose (a.k.a. Neel Basu) personal blog</subtitle>
  <link href="http://neelex.com/atom.xml" rel="self"/>
  
  <link href="http://neelex.com/"/>
  <updated>2023-03-26T20:08:35.950Z</updated>
  <id>http://neelex.com/</id>
  
  <author>
    <name>Neel Basu (Sunanda Bose)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Installing gitea and woodpecker using binary packages (WIP)</title>
    <link href="http://neelex.com/2023/03/26/Installing-gitea-using-binary-packages/"/>
    <id>http://neelex.com/2023/03/26/Installing-gitea-using-binary-packages/</id>
    <published>2023-03-26T17:53:00.000Z</published>
    <updated>2023-03-26T20:08:35.950Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Create-Users"><a href="#Create-Users" class="headerlink" title="Create Users"></a>Create Users</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser --system --shell /bin/bash --gecos <span class="string">&#x27;Git Version Control&#x27;</span> --group --disabled-password --home /home/git git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser --system --shell /bin/bash --gecos <span class="string">&#x27;Woodpecker CI&#x27;</span> --group --disabled-password --home /home/woodpecker woodpecker</span></span><br></pre></td></tr></table></figure><h4 id="Binaries"><a href="#Binaries" class="headerlink" title="Binaries"></a>Binaries</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.gitea.com/gitea/1.19.0/gitea-1.19.0-linux-amd64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv gitea-1.19.0-linux-amd64 /usr/<span class="built_in">local</span>/bin/gitea</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitea</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/woodpecker-ci/woodpecker/releases/download/v0.15.7/woodpecker-agent_0.15.7_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/woodpecker-ci/woodpecker/releases/download/v0.15.7/woodpecker-cli_0.15.7_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/woodpecker-ci/woodpecker/releases/download/v0.15.7/woodpecker-server_0.15.7_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install ./woodpecker-*</span></span><br></pre></td></tr></table></figure><h4 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /var/lib/gitea/&#123;custom,data,<span class="built_in">log</span>&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R git:git /var/lib/gitea/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod -R 750 /var/lib/gitea/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /etc/gitea</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown root:git /etc/gitea</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 770 /etc/gitea</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /var/lib/woodpecker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R woodpecker:woodpecker /var/lib/woodpecker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod -R 750 /var/lib/woodpecker/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo touch /etc/woodpecker.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod 770 /etc/woodpecker.conf</span></span><br></pre></td></tr></table></figure><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install postgresql postgresql-contrib</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo -u postgres psql</span></span><br><span class="line">postgres=# create database git;</span><br><span class="line">postgres=# create user git with encrypted password &#x27;pass&#x27;;</span><br><span class="line">postgres=# grant all privileges on database git to git;</span><br><span class="line">postgres=# create database woodpecker;</span><br><span class="line">postgres=# create user woodpecker with encrypted password &#x27;pass&#x27;;</span><br><span class="line">postgres=# grant all privileges on database woodpecker to woodpecker;</span><br><span class="line">postgres=# exit</span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>Save the following as <code>sudo vim /etc/nginx/sites-available/gitea.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> git.YOUR_DOMAIN.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto $scheme;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Save the following as <code>sudo vim /etc/nginx/sites-available/woodpecker.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> woodpecker.YOUR_DOMAIN.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto $scheme;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">chunked_transfer_encoding</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enable both of these configs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/gitea.conf /etc/nginx/sites-enabled/</span><br><span class="line">sudo ln -s /etc/nginx/sites-available/woodpecker.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>Restart nginx service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h4 id="System-Services"><a href="#System-Services" class="headerlink" title="System Services"></a>System Services</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo wget https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/systemd/gitea.service -P /etc/systemd/system/</span></span><br></pre></td></tr></table></figure><p>Open <code>/etc/systemd/system/gitea.service</code> and uncoment postgresql lines.</p><p>Start the service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start gitea</span></span><br></pre></td></tr></table></figure><p>open <code>http://IP_ADDRESS:3000</code> and configure the database settings.</p><p>Open <code>/etc/gitea/app.ini</code> and and change <code>ROOT_URL</code> to <code>git.YOUR_DOMAIN.com</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart gitea</span></span><br></pre></td></tr></table></figure><p>Now visit <code>http://git.YOUR_DOMAIN.com/admin/applications</code>. </p><p>Add Woodpecker application with Redirect URI <code>http://woodpecker.YOUR_DOMAIN.com/authorize</code> and copy the client id and the secret somewhere as we will need then in next steps.</p><p>Create file <code>/etc/systemd/system/woodpecker.service</code> and paste the following</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Woodpecker</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;woodpecker-ci.org&#x2F;docs&#x2F;intro</span><br><span class="line">Requires&#x3D;network-online.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;woodpecker</span><br><span class="line">Group&#x3D;woodpecker</span><br><span class="line">EnvironmentFile&#x3D;&#x2F;etc&#x2F;woodpecker.conf</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;woodpecker-server</span><br><span class="line">RestartSec&#x3D;5</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">SyslogIdentifier&#x3D;woodpecker-server</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;var&#x2F;lib&#x2F;woodpecker</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>Write the following configuration in <code>/etc/woodpecker.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WOODPECKER_OPEN&#x3D;true</span><br><span class="line">WOODPECKER_HOST&#x3D;http:&#x2F;&#x2F;woodpecker.YOUR_DOMAIN.com</span><br><span class="line">WOODPECKER_GITEA&#x3D;true</span><br><span class="line">WOODPECKER_GITEA_URL&#x3D;http:&#x2F;&#x2F;git.YOUR_DOMAIN.com</span><br><span class="line">WOODPECKER_GITEA_CLIENT&#x3D;COPIED_CLIENT_ID</span><br><span class="line">WOODPECKER_GITEA_SECRET&#x3D;COPIED_SECRET</span><br><span class="line">WOODPECKER_GITEA_SKIP_VERIFY&#x3D;true</span><br><span class="line">WOODPECKER_DATABASE_DRIVER&#x3D;postgres</span><br><span class="line">WOODPECKER_DATABASE_DATASOURCE&#x3D;postgres:&#x2F;&#x2F;woodpecker:password@127.0.0.1:5432&#x2F;woodpecker?sslmode&#x3D;disable</span><br></pre></td></tr></table></figure><p>Start woodpecker service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start woodpecker</span></span><br></pre></td></tr></table></figure><p>Now visit <code>http://woodpecker.YOUR_DOMAIN.com</code>. it should redirect you to <code>http://git.YOUR_DOMAIN.com</code> for authentication. Ideally it should be done by now. But the problem is it will crash due to this issue (<a href="https://github.com/woodpecker-ci/woodpecker/issues/1576">https://github.com/woodpecker-ci/woodpecker/issues/1576</a>). The workaround is to change <code>WOODPECKER_GITEA_URL</code> to <code>http://woodpecker.YOUR_DOMAIN.com:3000</code>. For some reason, woodpecker server crashes when gitea is behind nginx proxy.</p><blockquote><p>If woodpecker crashes then do the following to get the backtrace</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo -i</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> -o allexport</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/woodpecker.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> +o allexport</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/bin/woodpecker-server</span></span><br></pre></td></tr></table></figure></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Create-Users&quot;&gt;&lt;a href=&quot;#Create-Users&quot; class=&quot;headerlink&quot; title=&quot;Create Users&quot;&gt;&lt;/a&gt;Create Users&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Listing Terms and Acronyms in Text or LaTeX using bash</title>
    <link href="http://neelex.com/2020/12/26/latex-shortcuts-acronyms-terms/"/>
    <id>http://neelex.com/2020/12/26/latex-shortcuts-acronyms-terms/</id>
    <published>2020-12-26T15:35:35.000Z</published>
    <updated>2023-03-26T20:08:35.950Z</updated>
    
    <content type="html"><![CDATA[<p>I often need to check for inconsistent capitalization in my tex files. So listing all the consecutive capitalized words and characters helps me to decide which one is intentional capitalization and which one is not. The following bash script has two functions can lists all terms (Capitalized Phrase) and acronyms used throughout the input file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ terms filename.tex </span><br><span class="line">     19 Cloud Station</span><br><span class="line">      9 Sensor Gateway</span><br><span class="line">      7 Sensor Cloud Infrastructure</span><br><span class="line">      ...</span><br><span class="line">$ acronyms filename.tex      </span><br><span class="line">     34 VM</span><br><span class="line">     13 IaaS</span><br><span class="line">     13 CPU</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><a id="more"></a><p>To reuse save the code shown at the end as <code>$HOME/shortcuts.sh</code> then issue command <code>source $HOME/shortcuts.sh</code>. use <code>terms</code> and <code>acronyms</code> functions as shown below. And here is the <code>shortcuts.sh</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># source shortcuts.sh</span></span><br><span class="line"><span class="comment"># terms filename.tex</span></span><br><span class="line"><span class="comment"># acronyms filename.tex</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">terms</span></span>()&#123;</span><br><span class="line">    grep -o -P <span class="string">&quot;(?:[A-Z][a-z]+)\s+(?:\s*[A-Z][a-zA-Z]+)+&quot;</span> <span class="variable">$1</span> | sort | uniq -c | sort -nr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">acronyms</span></span>()&#123;</span><br><span class="line">    grep -o -P <span class="string">&quot;\b(?:[A-Z][a-z]*)&#123;2,&#125;\b&quot;</span> <span class="variable">$1</span> | sort | uniq -c | sort -nr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;I often need to check for inconsistent capitalization in my tex files. So listing all the consecutive capitalized words and characters helps me to decide which one is intentional capitalization and which one is not. The following bash script has two functions can lists all terms (Capitalized Phrase) and acronyms used throughout the input file.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ terms filename.tex &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     19 Cloud Station&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      9 Sensor Gateway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      7 Sensor Cloud Infrastructure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ acronyms filename.tex      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     34 VM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     13 IaaS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     13 CPU&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Programming" scheme="http://neelex.com/categories/Programming/"/>
    
    
    <category term="Latex" scheme="http://neelex.com/tags/Latex/"/>
    
    <category term="Linux" scheme="http://neelex.com/tags/Linux/"/>
    
    <category term="Utilities" scheme="http://neelex.com/tags/Utilities/"/>
    
  </entry>
  
  <entry>
    <title>Rumal a header only HTML/CSS/Javascript Generator C++ library</title>
    <link href="http://neelex.com/2019/12/26/rumal/"/>
    <id>http://neelex.com/2019/12/26/rumal/</id>
    <published>2019-12-26T22:45:26.000Z</published>
    <updated>2023-03-26T20:08:35.950Z</updated>
    
    <content type="html"><![CDATA[<p>Rumal is a C++ library that can generate HTML/CSS/Javascript code from significantly identical C++ syntax.<br>Currently it uses <code>std::string</code> which is supposed to be replaced with compile time strings. Injecting placeholders, is also planned but not yet implemented.<br>This will make it usable as a template engine.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; </span><br><span class="line">    div(_id(<span class="number">42</span>) / _class(<span class="string">&quot;test&quot;</span>),</span><br><span class="line">        span(_id(<span class="number">43</span>) / _class(<span class="string">&quot;test&quot;</span>), <span class="string">&quot;Hello&quot;</span>),</span><br><span class="line">        span(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><a id="more"></a><p>The above code prints </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;42&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;43&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span> Hello <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    World</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Rumal can be used to generate CSS too.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select(<span class="string">&quot;.main&quot;</span>, </span><br><span class="line">      display(<span class="string">&quot;block&quot;</span>) </span><br><span class="line">    / position(<span class="string">&quot;relative&quot;</span>), </span><br><span class="line">    select(<span class="string">&quot;.heading&quot;</span>, </span><br><span class="line">          display(<span class="string">&quot;block&quot;</span>) </span><br><span class="line">        / position(<span class="string">&quot;relative&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">) / select(<span class="string">&quot;.container&quot;</span>, </span><br><span class="line">      display(<span class="string">&quot;block&quot;</span>) </span><br><span class="line">    / position(<span class="string">&quot;relative&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>With the above C++ code the following CSS is generated</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &gt; <span class="selector-class">.heading</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rumal can also be used as a kind of Quine (self replicating program) that generates Javascript from a significantly similar C++ syntax.</p><blockquote><p>However the Javascript generation part is incomplete and buggy. I am not getting enough time to complete / fix it. Use at your own risk</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">assignable&lt;Node&gt; <span class="title">document</span><span class="params">(<span class="string">&quot;document&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">assignable&lt;Node&gt; <span class="title">y</span><span class="params">(<span class="string">&quot;y&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> script = jQuery(document).ready(function()[</span><br><span class="line">        jQuery(<span class="string">&quot;.hallo&quot;</span>).click(function()[</span><br><span class="line">            jQuery(y).hide(),</span><br><span class="line">            jQuery(<span class="string">&quot;.hello&quot;</span>).hide()</span><br><span class="line">        ])</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure><p>The above generates a similar javascript code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)[</span></span><br><span class="line"><span class="function">    <span class="title">jQuery</span>(<span class="params"><span class="string">&quot;.hallo&quot;</span></span>).<span class="title">click</span>(<span class="params"><span class="keyword">function</span>()&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        jQuery(y).hide(),</span></span></span><br><span class="line"><span class="function"><span class="params">        jQuery(<span class="string">&quot;.hello&quot;</span>).hide()</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>)</span></span><br><span class="line"><span class="function">&#125;)</span>;</span><br></pre></td></tr></table></figure><p>In order to use rumal js first the OO skeleton of the Javascript types has to be specified</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> rumal::js;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fn_</span>:</span> callable_&lt;fn_&gt;&#123;</span><br><span class="line">    fn_(): callable_&lt;fn_&gt;(<span class="string">&quot;fn&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m1_</span>:</span> callable_&lt;m1_&gt;&#123;</span><br><span class="line">    m1_(): callable_&lt;m1_&gt;(<span class="string">&quot;m1&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m2_</span>:</span> callable_&lt;m2_&gt;&#123;</span><br><span class="line">    m2_(): callable_&lt;m2_&gt;(<span class="string">&quot;m2&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m4_</span>:</span> callable_&lt;m4_&gt;&#123;</span><br><span class="line">    m4_(): callable_&lt;m4_&gt;(<span class="string">&quot;m4&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m5_</span>:</span> callable_&lt;m5_&gt;&#123;</span><br><span class="line">    m5_(): callable_&lt;m5_&gt;(<span class="string">&quot;m5&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Five void returning javascript functions <code>fn, m1, m2, m4, m5</code> are specified.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">object4_</span>&#123;</span></span><br><span class="line">    method_&lt;m5_, T&gt; m5;</span><br><span class="line">    </span><br><span class="line">    object4_(<span class="keyword">const</span> T&amp; pkt): m5(pkt)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">object3_</span>&#123;</span></span><br><span class="line">    method_&lt;m5_, T&gt; m5;</span><br><span class="line">    property_&lt;object4_, T&gt; o4;</span><br><span class="line">    </span><br><span class="line">    object3_(<span class="keyword">const</span> T&amp; pkt): m5(pkt), o4(<span class="string">&quot;o4&quot;</span>, pkt)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">object2_</span>:</span> iterable_&lt;T, object3_&gt;&#123;</span><br><span class="line">    method_&lt;m4_, T&gt; m4;</span><br><span class="line">    </span><br><span class="line">    object2_(<span class="keyword">const</span> T&amp; pkt): iterable_&lt;T, object3_&gt;(pkt), m4(pkt)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m3_</span>:</span> callable_&lt;m3_, object2_&gt;&#123;</span><br><span class="line">    m3_(): callable_&lt;m3_, object2_&gt;(<span class="string">&quot;m3&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">object1_</span>&#123;</span></span><br><span class="line">    rumal::js::method_&lt;m1_, T&gt; m1;</span><br><span class="line">    rumal::js::method_&lt;m2_, T&gt; m2;</span><br><span class="line">    rumal::js::method_&lt;m3_, T&gt; m3;</span><br><span class="line">    </span><br><span class="line">    object1_(<span class="keyword">const</span> T&amp; pkt): m1(pkt), m2(pkt), m3(pkt)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">m0_</span>:</span> rumal::js::callable_&lt;m0_, object1_&gt;&#123;</span><br><span class="line">    m0_(): rumal::js::callable_&lt;m0_, object1_&gt;(<span class="string">&quot;m0&quot;</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Javascript Classes <code>object4</code>, <code>object3</code>, <code>object2</code>, and <code>object1</code> are specified. The <code>object4</code> has a method <code>m5</code> in it. So any function returning <code>object4</code> will have a <code>.m5()</code> method callable. Similarly <code>object3</code> describes the method <code>m5</code> and a property <code>o4</code> or type <code>object4</code>. So any function <code>f</code> returning an instance of <code>object4</code> will have <code>.m5()</code> as well as <code>.o4.m5()</code> accessible.</p><p>Finally the <code>object1</code> Class have three methods <code>m1</code>, <code>m2</code> and <code>m3</code>.</p><p>Following are somw example usages.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fn_ fn;</span><br><span class="line">m0_ m0;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; fn(<span class="number">1</span>, <span class="number">2.5</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>).m4 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>).m4(<span class="number">4</span>, <span class="number">75.5</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hello&quot;</span>)[<span class="number">1</span>].m5 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].m5(<span class="string">&quot;Hallo&quot;</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5(<span class="number">42</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5(<span class="number">42</span>) - m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4 + fn * m0 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (m0(<span class="number">1</span>, <span class="number">4.5</span>) , m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>) , m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>The above code generates the following javascript, which is much like printing itself.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">1</span>, <span class="number">2.5</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>).m4</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>).m4(<span class="number">4</span>, <span class="number">75.5</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hello&quot;</span>)[<span class="number">1</span>].m5</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].m5(<span class="string">&quot;Hallo&quot;</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5(<span class="number">42</span>)</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5()</span><br><span class="line">m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4.m5(<span class="number">42</span>) - m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4 + fn * m0</span><br><span class="line">(m0(<span class="number">1</span>, <span class="number">4.5</span>) , m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>) , m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4)</span><br></pre></td></tr></table></figure><p>In the example below a javascript variable (assignable) <code>x</code> is created. The functions <code>_const</code> and <code>_let</code> generates the <code>const</code> and <code>let</code> javascript keywords. <code>&lt;&lt;==</code>is used as assignment operator instead.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = rumal::js::assignable&lt;object2_&gt;(<span class="string">&quot;x&quot;</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; _const(x) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (_let(x) &lt;&lt;= m0(<span class="number">1</span>, <span class="number">4.5</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>The above C++ code generates the following Javascript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x</span><br><span class="line"><span class="keyword">const</span> x</span><br><span class="line"><span class="keyword">let</span> x = m0(<span class="number">1</span>, <span class="number">4.5</span>)</span><br></pre></td></tr></table></figure><p>Next is the example of generating the conditional structure in Javascript <code>[]</code> in C++ generates <code>&#123;&#125;</code> in Javascript</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (</span><br><span class="line">        <span class="number">24</span> + m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>).m4 + <span class="number">42</span> + <span class="string">&quot;Hallo World&quot;</span>,</span><br><span class="line">        _if(x &gt;= <span class="number">1</span> &amp;&amp; <span class="number">2</span>*x &gt;= <span class="number">1</span>)[</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>), </span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>),</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4</span><br><span class="line">        ],</span><br><span class="line">        _else(x &lt; <span class="number">0.5</span>)[</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>), </span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>),</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4</span><br><span class="line">        ],</span><br><span class="line">        _else()[</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>), </span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m1(<span class="number">4</span>, <span class="number">2.7</span>),</span><br><span class="line">            m0(<span class="number">1</span>, <span class="number">4.5</span>).m3(<span class="number">4</span>, <span class="number">2.7</span>, <span class="string">&quot;hi&quot;</span>)[<span class="number">1</span>].o4</span><br><span class="line">        ]</span><br><span class="line">    ) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><a href="https://gitlab.com/neel.basu/rumal">Gitlab</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rumal is a C++ library that can generate HTML/CSS/Javascript code from significantly identical C++ syntax.&lt;br&gt;Currently it uses &lt;code&gt;std::string&lt;/code&gt; which is supposed to be replaced with compile time strings. Injecting placeholders, is also planned but not yet implemented.&lt;br&gt;This will make it usable as a template engine.&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    div(_id(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;) / _class(&lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(_id(&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;) / _class(&lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        span(&lt;span class=&quot;string&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Announcement" scheme="http://neelex.com/categories/Announcement/"/>
    
    
    <category term="C++" scheme="http://neelex.com/tags/C/"/>
    
    <category term="XML" scheme="http://neelex.com/tags/XML/"/>
    
    <category term="HTML" scheme="http://neelex.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://neelex.com/tags/CSS/"/>
    
    <category term="Javascript" scheme="http://neelex.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Tash (ট্যাঁশ) an Open Source C++ library for ArangoDB and AQL</title>
    <link href="http://neelex.com/2019/09/19/tash/"/>
    <id>http://neelex.com/2019/09/19/tash/</id>
    <published>2019-09-19T17:16:43.000Z</published>
    <updated>2023-03-26T20:08:35.950Z</updated>
    
    <content type="html"><![CDATA[<p>I am working on <a href="https://gitlab.com/neel.basu/tash">Tash</a> which is an Open Source C++ library for ArangoDB Database which includes APIs for HTTP based document access and a query builder for AQL (Arango Query Language). These are a few example usages.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> name = <span class="string">&quot;Hijibijbij&quot;</span>;</span><br><span class="line"><span class="function">tash::shell <span class="title">shell</span><span class="params">(<span class="string">&quot;school&quot;</span>)</span></span>; </span><br><span class="line">shell &lt;&lt;  select(<span class="string">&quot;s&quot;</span>).in(<span class="string">&quot;students&quot;</span>)  </span><br><span class="line">        / filter((clause(<span class="string">&quot;s.name&quot;</span>) == name) &amp;&amp; (clause(<span class="string">&quot;s.fathers_name&quot;</span>) == name)) </span><br><span class="line">        / sort().asc(<span class="string">&quot;s._key&quot;</span>)</span><br><span class="line">        / yield(<span class="string">&quot;s&quot;</span>); </span><br><span class="line">nlohmann::json result;</span><br><span class="line">shell &gt;&gt; result;</span><br></pre></td></tr></table></figure><p>The above generates an equivalent AQL and execute it over the arangodb connection</p><p><img src="/images/tash-goru.png" alt="tashgoru" title="ট্যাঁশগরু সুকুমার রায়"></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR s IN students</span><br><span class="line">    FILTER s.name &#x3D;&#x3D; &quot;Hijibijbij&quot; AND s.fathers_name &#x3D;&#x3D; &quot;Hijibijbij&quot;</span><br><span class="line">    SORT s._key ASC </span><br><span class="line">    RETURN s</span><br></pre></td></tr></table></figure><p>Along with AQL generation it also performs normal HTTP API based document access.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tash::vertex <span class="title">students</span><span class="params">(school, <span class="string">&quot;students&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(students.exists() == boost::beast::http::status::not_found)&#123;</span><br><span class="line">    students.create();</span><br><span class="line">&#125;</span><br><span class="line">nlohmann::json document = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;uncles_name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">boost::beast::http::status status = students.add(document);</span><br><span class="line">nlohmann::json hijibijbij = students.by_key(document[<span class="string">&quot;_key&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br></pre></td></tr></table></figure><p>Unlike Fuerte it does not require velocypack or node. Instead it uses nlohmann::json and Boost.Beast libraries</p><h2 id="Building"><a href="#Building" class="headerlink" title="Building"></a>Building</h2><h3 id="prerequisites"><a href="#prerequisites" class="headerlink" title="prerequisites"></a>prerequisites</h3><ul><li>C++ compiler</li><li>CMake</li><li>boost library</li><li>nlohmann::json [OPTIONAL] (tash ships with a single file version of nlohmann::json)</li></ul><h3 id="compiling"><a href="#compiling" class="headerlink" title="compiling"></a>compiling</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/neel.basu/tash.git</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tash/arango.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/format.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/beast/http/status.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">tash::shell <span class="title">school</span><span class="params">(<span class="string">&quot;school&quot;</span>)</span></span>; <span class="comment">// shell(&quot;school&quot;, &quot;localhost&quot;, 8529, &quot;root&quot;, &quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">if</span>(school.exists() == boost::beast::http::status::not_found)&#123;</span><br><span class="line">        school.create();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tash::vertex <span class="title">students</span><span class="params">(school, <span class="string">&quot;students&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(students.exists() == boost::beast::http::status::not_found)&#123;</span><br><span class="line">        students.create();</span><br><span class="line">    &#125;</span><br><span class="line">    nlohmann::json document = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;uncles_name&quot;</span>, <span class="string">&quot;Hijibijbij&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    boost::beast::http::status status = students.add(document);</span><br><span class="line">    <span class="keyword">if</span>(status == boost::beast::http::status::accepted)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; boost::format(<span class="string">&quot;document created with key %1%&quot;</span>) % document[<span class="string">&quot;_key&quot;</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to create document with error &quot;</span> &lt;&lt; status &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nlohmann::json hijibijbij = students.by_key(document[<span class="string">&quot;_key&quot;</span>].get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;());</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;retrieved document &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; hijibijbij &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AQL-Arango-Query-Language-Builder"><a href="#AQL-Arango-Query-Language-Builder" class="headerlink" title="AQL (Arango Query Language) Builder"></a>AQL (Arango Query Language) Builder</h2><h3 id="Retrieve-Filter-Sort"><a href="#Retrieve-Filter-Sort" class="headerlink" title="Retrieve / Filter / Sort"></a>Retrieve / Filter / Sort</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tash::shell <span class="title">shell</span><span class="params">(<span class="string">&quot;school&quot;</span>)</span></span>; <span class="comment">// shell(&quot;school&quot;, &quot;localhost&quot;, 8529, &quot;root&quot;, &quot;root&quot;)</span></span><br><span class="line">shell &lt;&lt;  select(<span class="string">&quot;s&quot;</span>).in(<span class="string">&quot;students&quot;</span>)  <span class="comment">// use select instead of FOR because for is a C++ keyword</span></span><br><span class="line">        / filter((clause(<span class="string">&quot;s.name&quot;</span>) == name) &amp;&amp; (clause(<span class="string">&quot;s.fathers_name&quot;</span>) == name)) <span class="comment">// using std::string puts quotes around the value</span></span><br><span class="line">        / sort().asc(<span class="string">&quot;s._key&quot;</span>)</span><br><span class="line">        / yield(<span class="string">&quot;s&quot;</span>); <span class="comment">// use yield instead of RETURN because return is a C++ keyword</span></span><br><span class="line">nlohmann::json result;</span><br><span class="line">shell &gt;&gt; result;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR s IN students</span><br><span class="line">    FILTER s.name &#x3D;&#x3D; &quot;Hijibijbij&quot; AND s.fathers_name &#x3D;&#x3D; &quot;Hijibijbij&quot;</span><br><span class="line">    SORT s._key ASC </span><br><span class="line">    RETURN s</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  select(<span class="string">&quot;s&quot;</span>).in(<span class="string">&quot;students&quot;</span>) </span><br><span class="line">/ filter((clause(<span class="string">&quot;s.name&quot;</span>) == <span class="string">&quot;s.fathers_name&quot;</span>)) <span class="comment">// using C string doesn&#x27;t put quotes around the value</span></span><br><span class="line">/ sort().asc(<span class="string">&quot;s._key&quot;</span>)</span><br><span class="line">/ yield(<span class="string">&quot;s&quot;</span>); </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR s IN students</span><br><span class="line">    FILTER s.name &#x3D;&#x3D; s.fathers_name</span><br><span class="line">    SORT s._key ASC </span><br><span class="line">    RETURN s</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><h4 id="insert-single-row"><a href="#insert-single-row" class="headerlink" title="insert single row"></a>insert single row</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert(nlohmann::json&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;</span><br><span class="line">&#125;).in(<span class="string">&quot;students&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT &#123;&quot;fathers_name&quot;:&quot;tash&quot;,&quot;name&quot;:&quot;tash&quot;&#125; INTO students</span><br></pre></td></tr></table></figure><h4 id="insert-multiple-rows"><a href="#insert-multiple-rows" class="headerlink" title="insert multiple rows"></a>insert multiple rows</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select(<span class="string">&quot;u&quot;</span>).in(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;</span><br><span class="line">&#125;) / insert(<span class="string">&quot;u&quot;</span>).in(<span class="string">&quot;students&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOR u IN &#123;&quot;fathers_name&quot;:&quot;tash&quot;,&quot;name&quot;:&quot;tash&quot;&#125;</span><br><span class="line">    INSERT u INTO students</span><br></pre></td></tr></table></figure><h3 id="generate-rows"><a href="#generate-rows" class="headerlink" title="generate rows"></a>generate rows</h3><ul><li>in <code>nlohmann::json</code> string values are always quoted</li><li><code>tash::assign</code> generates non-nested key value pairs (non-nested json)</li><li>C style strings are unquoted, <code>std::string</code> is quoted</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  select(<span class="string">&quot;i&quot;</span>).in(<span class="number">1</span>, <span class="number">10</span>) </span><br><span class="line">/ insert(</span><br><span class="line">    assign(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;CONCAT(&#x27;tash&#x27;, i)&quot;</span>)</span><br><span class="line">   .assign(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;(i % 2 == 0 ? &#x27;f&#x27; : &#x27;m&#x27;)&quot;</span>)</span><br><span class="line">   .assign(<span class="string">&quot;fathers_name&quot;</span>, <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;tash&quot;</span>))</span><br><span class="line">  ).in(<span class="string">&quot;users&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FOR i IN 1..10</span><br><span class="line">    INSERT &#123;</span><br><span class="line">        name: CONCAT(&#39;test&#39;, i), </span><br><span class="line">        gender: (i % 2 &#x3D;&#x3D; 0 ? &#39;f&#39; : &#39;m&#39;),</span><br><span class="line">        fathers_name: &quot;tash&quot;</span><br><span class="line">    &#125; INTO users</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update(nlohmann::json&#123;</span><br><span class="line">    &#123;<span class="string">&quot;_key&quot;</span>, <span class="number">1234</span>&#125;</span><br><span class="line">&#125;).with(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;uncles_name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;</span><br><span class="line">&#125;).in(<span class="string">&quot;students&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#123;&quot;_key&quot;:1234&#125; WITH &#123;&quot;uncles_name&quot;:&quot;tash&quot;&#125; IN students</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  (let(<span class="string">&quot;date&quot;</span>) = <span class="string">&quot;DATE_NOW()&quot;</span>)</span><br><span class="line">/ select(<span class="string">&quot;user&quot;</span>).in(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">/ filter(clause(<span class="string">&quot;user.isImportantUser&quot;</span>) == <span class="string">&quot;null&quot;</span>)</span><br><span class="line">/ (let(<span class="string">&quot;numberOfLogins&quot;</span>)  = </span><br><span class="line">    select(<span class="string">&quot;login&quot;</span>).in(<span class="string">&quot;logins&quot;</span>)</span><br><span class="line">    / filter(clause(<span class="string">&quot;login.user&quot;</span>) == <span class="string">&quot;user._key&quot;</span>)</span><br><span class="line">    / collect().with(<span class="string">&quot;COUNT&quot;</span>).in(<span class="string">&quot;numLogins&quot;</span>)</span><br><span class="line">    / yield(<span class="string">&quot;numLogins&quot;</span>)</span><br><span class="line">)</span><br><span class="line">/ filter(clause(<span class="string">&quot;numberOfLogins&quot;</span>) &gt; <span class="number">50</span>)</span><br><span class="line">/ update(<span class="string">&quot;user&quot;</span>).with(</span><br><span class="line">     assign(<span class="string">&quot;isImportantUser&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    .assign(<span class="string">&quot;dateBecameImportant&quot;</span>, <span class="string">&quot;date&quot;</span>)</span><br><span class="line">    .assign(<span class="string">&quot;uncles_name&quot;</span>, <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;tash&quot;</span>))</span><br><span class="line">).in(<span class="string">&quot;users&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LET date &#x3D; DATE_NOW()</span><br><span class="line">    FOR user IN users</span><br><span class="line">        FILTER user.isImportantUser &#x3D;&#x3D; null</span><br><span class="line">        LET numberOfLogins &#x3D; (</span><br><span class="line">            FOR login IN logins</span><br><span class="line">                FILTER login.user &#x3D;&#x3D; user._key</span><br><span class="line">                COLLECT  WITH COUNT INTO numLogins</span><br><span class="line">                RETURN numLogins</span><br><span class="line">        )</span><br><span class="line">        FILTER numberOfLogins &gt; 50</span><br><span class="line">        UPDATE user WITH &#123;</span><br><span class="line">            isImportantUser: 1, </span><br><span class="line">            dateBecameImportant: date,</span><br><span class="line">            uncles_name: &quot;tash&quot;</span><br><span class="line">        &#125; IN users</span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">replace(nlohmann::json&#123;</span><br><span class="line">    &#123;<span class="string">&quot;_key&quot;</span>, <span class="number">1234</span>&#125;</span><br><span class="line">&#125;).with(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;uncles_name&quot;</span>, <span class="string">&quot;tash&quot;</span>&#125;</span><br><span class="line">&#125;).in(<span class="string">&quot;students&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REPLACE &#123;&quot;_key&quot;:1234&#125; </span><br><span class="line">    WITH &#123;</span><br><span class="line">        &quot;name&quot;:&quot;tash&quot;,</span><br><span class="line">        &quot;uncles_name&quot;:&quot;tash&quot;</span><br><span class="line">    &#125; IN students</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erase(assign(<span class="string">&quot;_key&quot;</span>, <span class="string">&quot;1&quot;</span>)).in(<span class="string">&quot;students&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REMOVE &#123;_key: 1&#125; IN students</span><br></pre></td></tr></table></figure><h3 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upsert(nlohmann::json&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tokai&quot;</span>&#125;</span><br><span class="line">&#125;).insert(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tokai&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;tokai&quot;</span>&#125;</span><br><span class="line">&#125;).update(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tokai&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fathers_name&quot;</span>, <span class="string">&quot;tokai&quot;</span>&#125;</span><br><span class="line">&#125;).in(<span class="string">&quot;students&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPSERT &#123;&quot;name&quot;:&quot;tokai&quot;&#125; </span><br><span class="line">    INSERT &#123;&quot;fathers_name&quot;:&quot;tokai&quot;,&quot;name&quot;:&quot;tokai&quot;&#125; </span><br><span class="line">    UPDATE &#123;&quot;fathers_name&quot;:&quot;tokai&quot;,&quot;name&quot;:&quot;tokai&quot;&#125;</span><br><span class="line">    IN students</span><br></pre></td></tr></table></figure><h2 id="create-graph"><a href="#create-graph" class="headerlink" title="create graph"></a>create graph</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> graph = ddl::graph_definition(<span class="string">&quot;corpus&quot;</span>)</span><br><span class="line">    .add_edge_definition(ddl::edge_definition(<span class="string">&quot;StructuralE&quot;</span>).add_from(<span class="string">&quot;Word&quot;</span>).add_to(<span class="string">&quot;Word&quot;</span>).add_to(<span class="string">&quot;Sentence&quot;</span>))</span><br><span class="line">    .add_edge_definition(ddl::edge_definition(<span class="string">&quot;WNeighbourhoodE&quot;</span>).add_from(<span class="string">&quot;Word&quot;</span>).add_to(<span class="string">&quot;Word&quot;</span>))</span><br><span class="line">    .add_edge_definition(ddl::edge_definition(<span class="string">&quot;InstanceE&quot;</span>).add_from(<span class="string">&quot;Word&quot;</span>).add_to(<span class="string">&quot;Vocabulary&quot;</span>));</span><br><span class="line">query(<span class="string">&quot;_api/gharial&quot;</span>, graph.json().dump());</span><br></pre></td></tr></table></figure><h2 id="create-aql-function"><a href="#create-aql-function" class="headerlink" title="create aql function"></a>create aql function</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> function_str = <span class="string">R&quot;(</span></span><br><span class="line"><span class="string">    function(p1, p2)&#123;</span></span><br><span class="line"><span class="string">        // function body</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)&quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> fnc = nlohmann::json(&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;NS::FNAME&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;code&quot;</span>, function_str&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;isDeterministic&quot;</span>, <span class="literal">true</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line">query(<span class="string">&quot;_api/aqlfunction&quot;</span>, fnc.dump());</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;I am working on &lt;a href=&quot;https://gitlab.com/neel.basu/tash&quot;&gt;Tash&lt;/a&gt; which is an Open Source C++ library for ArangoDB Database which includes APIs for HTTP based document access and a query builder for AQL (Arango Query Language). These are a few example usages.&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&amp;quot;Hijibijbij&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;tash::shell &lt;span class=&quot;title&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;school&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell &amp;lt;&amp;lt;  select(&lt;span class=&quot;string&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;).in(&lt;span class=&quot;string&quot;&gt;&amp;quot;students&amp;quot;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        / filter((clause(&lt;span class=&quot;string&quot;&gt;&amp;quot;s.name&amp;quot;&lt;/span&gt;) == name) &amp;amp;&amp;amp; (clause(&lt;span class=&quot;string&quot;&gt;&amp;quot;s.fathers_name&amp;quot;&lt;/span&gt;) == name)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        / sort().asc(&lt;span class=&quot;string&quot;&gt;&amp;quot;s._key&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        / yield(&lt;span class=&quot;string&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nlohmann::json result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell &amp;gt;&amp;gt; result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The above generates an equivalent AQL and execute it over the arangodb connection&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tash-goru.png&quot; alt=&quot;tashgoru&quot; title=&quot;ট্যাঁশগরু সুকুমার রায়&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Announcement" scheme="http://neelex.com/categories/Announcement/"/>
    
    
    <category term="C++" scheme="http://neelex.com/tags/C/"/>
    
    <category term="ArangoDB" scheme="http://neelex.com/tags/ArangoDB/"/>
    
    <category term="Graph Database" scheme="http://neelex.com/tags/Graph-Database/"/>
    
  </entry>
  
  <entry>
    <title>Mathematica++ a C++ library that speaks Mathematica</title>
    <link href="http://neelex.com/2018/09/23/mathematica/"/>
    <id>http://neelex.com/2018/09/23/mathematica/</id>
    <published>2018-09-23T17:07:02.000Z</published>
    <updated>2023-03-26T20:08:35.950Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">symbol <span class="title">x</span><span class="params">(<span class="string">&quot;x&quot;</span>)</span></span>;</span><br><span class="line">value  res;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> method = <span class="string">&quot;Newton&quot;</span>;</span><br><span class="line"></span><br><span class="line">shell &lt;&lt; Values(FindRoot(ArcTan(<span class="number">1000</span> * Cos(x)), List(x, <span class="number">1</span>, <span class="number">2</span>),  Rule(<span class="string">&quot;Method&quot;</span>) = method));</span><br><span class="line">shell &gt;&gt; res;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; results = cast&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt;(res);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; results[<span class="number">0</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints 10.9956</span></span><br></pre></td></tr></table></figure><p><a href="https://gitlab.com/neel.basu/mathematicapp"><img src="https://i.imgur.com/8aIcgt2.png" alt="Mathematica++ A C++ library that speaks Mathematica."></a></p><a id="more"></a><h2 id="A-C-Library-that-talks-Mathematica"><a href="#A-C-Library-that-talks-Mathematica" class="headerlink" title="A C++ Library that talks Mathematica"></a>A C++ Library that talks Mathematica</h2><p>Dot product and Determinant calculation in Mathematica Language</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">mata</span> <span class="operator">=</span> <span class="built_in">Table</span><span class="punctuation">[</span><span class="built_in">Mod</span><span class="punctuation">[</span><span class="variable">i</span> <span class="operator">+</span> <span class="variable">j</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">j</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">matb</span> <span class="operator">=</span> <span class="built_in">Table</span><span class="punctuation">[</span><span class="built_in">Mod</span><span class="punctuation">[</span><span class="variable">i</span> <span class="operator">+</span> <span class="variable">j</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">j</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">matc</span> <span class="operator">=</span> <span class="built_in">Dot</span><span class="punctuation">[</span><span class="variable">mata</span><span class="operator">,</span> <span class="variable">matb</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">matd</span> <span class="operator">=</span> <span class="built_in">Det</span><span class="punctuation">[</span><span class="variable">matc</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Equivalent C++ code with Mathematica++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mathematica::m mata = Table(Mod(i + j, <span class="number">2</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">mathematica::m matb = Table(Mod(i + j, <span class="number">3</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>)];</span><br><span class="line">mathematica::m matc = Dot(mata, matb);</span><br><span class="line">mathematica::m matd = Det(matc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute mathematica constructs and fetch the response</span></span><br><span class="line">shell &lt;&lt; matd;</span><br><span class="line">shell &gt;&gt; determinant;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determinant can be converted to C++ machine sized types</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; determinant &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints -2</span></span><br></pre></td></tr></table></figure><ul><li>The Mathematica functions declared with <code>MATHEMATICA_DECLARE</code> outside any function (may be inside a header) e.g. <code>MATHEMATICA_DECLARE(Table)</code>, <code>MATHEMATICA_DECLARE(Det)</code></li><li>A symbols created using <code>mathematica::symbol</code> e.g. <code>mathematica::symbol i(&quot;i&quot;)</code>, <code>mathematica::symbol j(&quot;j&quot;)</code></li><li><code>mathematica::m</code> creates a mathematica construct</li><li><code>mathematica::value</code> holds the value returnd from mathematica</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare Mathematica functions </span></span><br><span class="line">MATHEMATICA_DECLARE(Table)</span><br><span class="line">MATHEMATICA_DECLARE(Mod)</span><br><span class="line">MATHEMATICA_DECLARE(Dot)</span><br><span class="line">MATHEMATICA_DECLARE(Det)</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect to mathematica (optionally pass argc, argv) See http://reference.wolfram.com/language/ref/c/WSOpenArgcArgv.html</span></span><br><span class="line">connector shell;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare symbols</span></span><br><span class="line"><span class="function">mathematica::symbol <span class="title">i</span><span class="params">(<span class="string">&quot;i&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">mathematica::symbol <span class="title">j</span><span class="params">(<span class="string">&quot;j&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare variable to contain mathematica output</span></span><br><span class="line">mathematica::value determinant;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create mathematica constructs</span></span><br><span class="line">mathematica::m mata = Table(Mod(i + j, <span class="number">2</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">mathematica::m matb = Table(Mod(i + j, <span class="number">3</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>)];</span><br><span class="line">mathematica::m matc = Dot(mata, matb);</span><br><span class="line">mathematica::m matd = Det(matc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute mathematica constructs and fetch the response</span></span><br><span class="line">shell &lt;&lt; matd;</span><br><span class="line">shell &gt;&gt; determinant;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determinant can be converted to C++ machine sized types</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; determinant &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints -2</span></span><br></pre></td></tr></table></figure><h2 id="Simple-Example-of-adding-all-numbers-in-a-list"><a href="#Simple-Example-of-adding-all-numbers-in-a-list" class="headerlink" title="Simple Example of adding all numbers in a list"></a>Simple Example of adding all numbers in a list</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> mathematica;</span><br><span class="line"><span class="function">symbol <span class="title">i</span><span class="params">(<span class="string">&quot;i&quot;</span>)</span></span>; <span class="comment">// declare mathematica symbol i</span></span><br><span class="line">value result_sum; <span class="comment">// declare the variable to hold the result</span></span><br><span class="line"></span><br><span class="line">shell &lt;&lt; Total(Table(i, List(i, <span class="number">1</span>, <span class="number">10</span>))); <span class="comment">// In Mathematica Total[Table[i, &#123;i, 1, 10&#125;]]</span></span><br><span class="line">shell &gt;&gt; result_sum;</span><br></pre></td></tr></table></figure><p><code>result_sum</code> is the result object that can be converted to <code>int</code>, <code>double</code>, <code>std::string</code> and streamed to <code>std::ostream</code>. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result_sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints 55</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result_sum-&gt;stringify() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints 55</span></span><br><span class="line"><span class="keyword">int</span> sum1 = *result_sum; <span class="comment">// auto coercion through type operator overloading for scaler types</span></span><br><span class="line"><span class="keyword">int</span> sum2 = cast&lt;<span class="keyword">int</span>&gt;(result_sum);</span><br><span class="line"><span class="keyword">double</span> sum3 = *result_sum;</span><br><span class="line"><span class="keyword">double</span> sum4 = cast&lt;<span class="keyword">double</span>&gt;(result_sum); </span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum4 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints 55 55 55 55</span></span><br></pre></td></tr></table></figure><h2 id="Fetching-composite-results-in-STL-containers"><a href="#Fetching-composite-results-in-STL-containers" class="headerlink" title="Fetching composite results (in STL containers)"></a>Fetching composite results (in STL containers)</h2><p><code>mathematica::value</code> can hold composite values returned from mathematica like this example of <code>List</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">symbol <span class="title">i</span><span class="params">(<span class="string">&quot;i&quot;</span>)</span></span>; <span class="comment">// declare mathematica symbol i</span></span><br><span class="line">value result_list; <span class="comment">// declare the variable to hold the result</span></span><br><span class="line"></span><br><span class="line">shell &lt;&lt; Table(i, List(i, <span class="number">1</span>, <span class="number">10</span>)); <span class="comment">// In Mathematica Table[i, &#123;i, 1, 10&#125;]</span></span><br><span class="line">shell &gt;&gt; result_list;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result_list &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints List[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result_list-&gt;stringify() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">// Prints List[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p><code>mathematica::value</code> object can be converted to an equivalent STL container like <code>std::vector</code> using <code>mathematica::cast</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span> = cast&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(result_list);</span><br></pre></td></tr></table></figure><h2 id="Executing-intermediate-returned-output"><a href="#Executing-intermediate-returned-output" class="headerlink" title="Executing intermediate returned output"></a>Executing intermediate returned output</h2><p>An <code>mathematica::value</code> object can be using to build a <code>mathematica::m</code> construct. Here <code>res_mata</code> and <code>res_matb</code> are values returned by mathematica that we are passing inside <code>Det</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">value res_mata;</span><br><span class="line">value res_matb;</span><br><span class="line">value res_matc;</span><br><span class="line">value res_det;</span><br><span class="line"></span><br><span class="line">shell &lt;&lt; Table(Mod(i+j, <span class="number">2</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">shell &gt;&gt; res_mata;</span><br><span class="line">shell &lt;&lt; Table(Mod(i+j, <span class="number">3</span>), List(i, <span class="number">1</span>, <span class="number">2</span>), List(j, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">shell &gt;&gt; res_matb;</span><br><span class="line">shell &lt;&lt; Dot(res_mata, res_matb);</span><br><span class="line">shell &gt;&gt; res_matc;</span><br><span class="line">shell &lt;&lt; Det(res_matc);</span><br><span class="line">shell &gt;&gt; res_det;</span><br></pre></td></tr></table></figure><h2 id="Serialize-struct-to-Mathematica-Association"><a href="#Serialize-struct-to-Mathematica-Association" class="headerlink" title="Serialize struct to Mathematica Association"></a>Serialize <code>struct</code> to Mathematica <code>Association</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; location;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> elevation;</span><br><span class="line"></span><br><span class="line">    point(): location(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">0</span>)), name(<span class="string">&quot;&quot;</span>), elevation (<span class="number">0.0f</span>)&#123;&#125;</span><br><span class="line">    point (<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; loc, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name_, <span class="keyword">double</span> elevation_): location(loc), name(name_), elevation(elevation_)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">value result;</span><br><span class="line"><span class="function">point <span class="title">pti</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">1</span>), <span class="string">&quot;Hallo&quot;</span>, <span class="number">100.0f</span>)</span></span>;</span><br><span class="line">shell &lt;&lt; Evaluate(pti);</span><br><span class="line">shell &gt;&gt; result;</span><br><span class="line">point pto = cast&lt;point&gt;(result);</span><br></pre></td></tr></table></figure><p>The object <code>pti</code> of type struct <code>point</code> is the above example will be serialized as <code>Association[Rule[&quot;location&quot;, List[1, 1]], Rule[&quot;name&quot;, &quot;Hallo&quot;], Rule[&quot;elevation&quot;, 100]]</code>. The associations need to be declared as following.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MATHEMATICA_ASSOCIATE(point, <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">double</span>)&#123;</span><br><span class="line">    MATHEMATICA_PROPERTY(<span class="number">0</span>, location)</span><br><span class="line">    MATHEMATICA_PROPERTY(<span class="number">1</span>, name)</span><br><span class="line">    MATHEMATICA_PROPERTY(<span class="number">2</span>, elevation)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://gitlab.com/neel.basu/mathematicapp">Mathematica++ Repo on GitLab</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;symbol &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value  res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; method = &lt;span class=&quot;string&quot;&gt;&amp;quot;Newton&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell &amp;lt;&amp;lt; Values(FindRoot(ArcTan(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * Cos(x)), List(x, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),  Rule(&lt;span class=&quot;string&quot;&gt;&amp;quot;Method&amp;quot;&lt;/span&gt;) = method));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell &amp;gt;&amp;gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; results = cast&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt;&amp;gt;(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; results[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Prints 10.9956&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://gitlab.com/neel.basu/mathematicapp&quot;&gt;&lt;img src=&quot;https://i.imgur.com/8aIcgt2.png&quot; alt=&quot;Mathematica++ A C++ library that speaks Mathematica.&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Announcement" scheme="http://neelex.com/categories/Announcement/"/>
    
    
    <category term="Mathematica" scheme="http://neelex.com/tags/Mathematica/"/>
    
    <category term="C++" scheme="http://neelex.com/tags/C/"/>
    
  </entry>
  
</feed>
